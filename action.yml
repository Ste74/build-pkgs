name: 'Manjaro Pkg Action'
description: 'Builds Manjaro pkgs'

inputs:
  user-mail:
    description: 'Manjaro user mail'
    required: true
  gitlab-user:
    description: 'gitalb user name'
    required: true
  manjaro-user:
    description: 'Manjaro user name'
    required: true
  gitlab-pw:
    description: 'gitlab password'
    required: true
  build-mirror:
    description: 'pacman-mirror to be used by manjaro-chrootbuild'
    required: false
    default: 'https://mirrors.manjaro.org/repo'
  branch:
    description: 'branch to build against'
    required: false
    default: "unstable"
  gpg-key:
    description: 'base64 encoded gpg secret key'
    required: true
  gpg-passphrase:
    description: 'passphrase for gpg key'
    required: false
  gpg-key-sign:
    description: 'Key to use with makepkg.conf'
    required: true
  ssh-key:
    description: 'boxit user ssh private key'
    required: false

runs:
  using: "composite"
  steps:
    - id: install_build-dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install \
        build-essential \
        cmake \
        fakeroot \
        git \
        libarchive-dev \
        libarchive-tools \
        libcurl4-openssl-dev \
        libgpgme-dev \
        libssl-dev \
        zip \
        python3-pip
        sudo pip3 install meson
        sudo pip3 install ninja
    - id: install_pacman
      shell: bash
      env:
        PACMAN_VERSION: 6.0.2
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/pacman.git
        pushd pacman
        sudo wget https://sources.archlinux.org/other/pacman/pacman-${PACMAN_VERSION}.tar.xz
        sudo tar -xvf pacman-${PACMAN_VERSION}.tar.xz
        pushd pacman-${PACMAN_VERSION}
        sudo patch -p1 -i ../pacman-sync-first-option.patch
        sudo meson --prefix=/usr \
                    --buildtype=plain \
                    -Ddoc=disabled \
                    -Ddoxygen=enabled \
                    -Dscriptlet-shell=/usr/bin/bash \
                    -Dldconfig=/usr/bin/ldconfig \
                    build
        sudo meson compile -C build
        sudo meson install -C build
        popd
        sudo install -m644 pacman.conf /etc/pacman.conf
        sudo install -m644 makepkg.conf /etc/
        sudo mkdir -p /etc/pacman.d
        echo "Server = ${{ inputs.build-mirror }}/${{ inputs.branch }}/\$repo/\$arch" | sudo tee /etc/pacman.d/mirrorlist
        # install updpkgsums
        sudo wget https://gitlab.archlinux.org/pacman/pacman-contrib/-/raw/master/src/updpkgsums.sh.in
        sudo wget https://gitlab.archlinux.org/pacman/pacman-contrib/-/raw/master/configure.ac
        contrib_ver=$(grep AC_INIT configure.ac | cut -d[ -f3 | cut -d] -f1)
        sudo sed -i -e "s/@PACKAGE_VERSION@/${contrib_ver}/; s/@libmakepkgdir@/\/usr\/share\/makepkg/" updpkgsums.sh.in
        sudo install -m755 updpkgsums.sh.in /usr/bin/updpkgsums
        popd
        sudo rm -rf pacman-${PACMAN_VERSION}
    - id: install_keyrings
      shell: bash
      run: |
        sudo install -dm755 /usr/share/pacman/keyrings/

        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/manjaro-keyring.git
        pushd manjaro-keyring
          sudo install -m0644 manjaro.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
        popd
        sudo rm -rf manjaro-keyring

        mkdir -p archlinux-keyring
        pushd archlinux-keyring
          wget https://archlinux.org/packages/core/any/archlinux-keyring/download -O /tmp/archlinux-keyring.tar.zst
          tar --use-compress-program=unzstd --strip-components=4 --wildcards -xvf /tmp/archlinux-keyring.tar.zst usr/share/pacman/keyrings/*
          sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
        popd
        sudo pacman-key --init
        sudo pacman-key --populate archlinux manjaro
        sudo rm -rf archlinux-keyring
    - id: install_manjaro-chrootbuild
      shell: bash
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/tools/development-tools/manjaro-chrootbuild
        pushd manjaro-chrootbuild
        sudo ./install.sh
        echo 'PACKAGER="${{ inputs.manjaro-user }} <${{ inputs.user-mail }}>"' | sudo tee -a /etc/makepkg.conf > /dev/null
        echo 'GPGKEY="${{ inputs.gpg-key-sign }}"' | sudo tee -a /etc/makepkg.conf > /dev/null
        popd
        sudo rm -rf manjaro-chrootbuild
    - id: clone_repo
      shell: bash
      run: |
        PKG=${{ github.event.repository.name }}
        #sudo git clone https://gitlab.manjaro.org/packages/community/${PKG}.git
        sudo git clone https://gitlab.archlinux.org/archlinux/packaging/packages/${PKG}.git
        sudo git config --global user.name "${{ inputs.gitlab-user }}"
        sudo git config --global user.email "${{ inputs.user-mail }}"
        echo "PKG=${PKG}" >> $GITHUB_ENV
        #if [[ "${{ inputs.bump-PKG }}" == "true" ]]; then
          sudo chown -R ${UID}:${UID} ${PKG}
        #  cd ${PKG}
        #  repover=$(sudo pacman -Syi ${PKG} | grep Version | rev | cut -d' ' -f1 | rev | cut -d- -f1)
        #  if [[ $repover == *rc* ]]; then
        #    ver_maj=$(echo $repover | cut -d'r' -f1)
        #    _rc=$(echo ${repover} | cut -d'c' -f2)
        #    _rc_new=rc$((${_rc}+1))
        #    sudo sed -i -e "/^_rc=/c\_rc=${_rc_new}" PKGBUILD
        #    ver_new=${ver_maj}${_rc_new}
        #  else
        #    ver_maj=$(printf "%s.%s" "$(echo ${repover} | cut -d. -f1)" "$(echo ${repover} | cut -d. -f2)")
        #    ver_min=$(echo ${repover} | cut -d. -f3)
        #    ver_new=${ver_maj}.$((${ver_min}+1))
        #  fi
        #    sudo sed -i -e "/^pkgver=/c\pkgver=${ver_new}" PKGBUILD
        #    sudo sed -i -e "/^pkgrel=/c\pkgrel=1" PKGBUILD
        #    echo "update PKGBUILD"
        #    updpkgsums
        #    sudo git add PKGBUILD
        #    sudo git commit -m"${ver_new}"
        #    sudo git push
        #    rm -rf src
        #    cd ..
        #fi
    - name: build_pkg
      shell: bash
      run: |
        if [ -z "${{ inputs.gpg-key }}" ] || [ -z "${{ inputs.gpg-passphrase }}" ]; then
          echo "## gpg credentials not provided. Skip signing."
        else
          export GPG_TTY=$(tty)
          echo "${{ inputs.gpg-key }}" > gpg.key
          gpg --batch --import gpg.key
        fi
        sudo chrootbuild -p ${{ env.PKG }} -b ${{ inputs.branch }} -GH
        for p in $(find $PWD -maxdepth 1 -regex '.*\.pkg\.tar\.\(xz\|zst\)'); do
          echo "## signing $p"
          gpg --pinentry-mode loopback --passphrase "${{ inputs.gpg-passphrase }}" --detach-sign ${p}
        done
   # - id: publish_pkg
   #   shell: bash -O extglob {0}
   #   run: |
   #     _chrpkb=/var/lib/chrootbuild/build/${{ env.PKG }}/PKGBUILD
   #     _ver=$(grep ^pkgver= ${_chrpkb} | cut -d'=' -f2)
   #     _rel=$(grep ^pkgrel= ${_chrpkb} | cut -d'=' -f2)
   #     _tag=${_ver}-${_rel}
   #     sudo zip ${PKG}-${_tag}.zip ./*.zst ./*sig
   #     echo ${{ github.token }} | gh auth login --with-token
   #     gh release create ${_tag} --title ${_tag} --repo ${{ github.repository }} --notes "automated release" || echo "release already exists"
   #     GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${_tag}
   #     gh release upload ${_tag} --repo ${GITHUB_REPOSITORY} --clobber ./${PKG}-${_tag}.zip
   #     echo "TAG=${_tag}" >>$GITHUB_ENV
   #     echo "GITHUB_LINK=${GITHUB_LINK}" >>$GITHUB_ENV
   #     sudo rm -rf /var/lib/chrootbuild

